import numpy as np
from scipy.optimize import minimize
import sys
from nest_elephant_tvb.Tvb.modify_tvb.fitting_TF.error_functions import error_relatif_mean,error_absolute_mean, \
    error_neg,index_max,error_relatif,error_absolute,index_max_rel

def poly( nb):
    def poly_0(p, fe, fi, adaptation):
        fe = fe
        a = p[0] + p[8] * adaptation + p[16] * fi
        b = p[1] + p[9] * adaptation + p[17] * fi
        c_1 = p[2] + p[10] * adaptation + p[18] * fi
        c_2 = p[3] + p[11] * adaptation + p[19] * fi
        c_3 = p[4] + p[12] * adaptation + p[20] * fi
        c_4 = p[5] + p[13] * adaptation + p[21] * fi
        c_5 = p[6] + p[14] * adaptation + p[22] * fi
        d = p[7] + p[15] * adaptation + p[23] * fi
        c = c_1 + c_2 * fe + c_3 * fe ** 2 + c_4 * fe ** 3 + c_5 * fe ** 4
        return a / (b + np.exp(-c)) + d

    def poly_1(p, fe, fi, adaptation):
        fe = fe + p[24] * adaptation + p[25] * fi
        a = p[0] + p[8] * adaptation + p[16] * fi
        b = p[1] + p[9] * adaptation + p[17] * fi
        c_1 = p[2] + p[10] * adaptation + p[18] * fi
        c_2 = p[3] + p[11] * adaptation + p[19] * fi
        c_3 = p[4] + p[12] * adaptation + p[20] * fi
        c_4 = p[5] + p[13] * adaptation + p[21] * fi
        c_5 = p[6] + p[14] * adaptation + p[22] * fi
        d = p[7] + p[15] * adaptation + p[23] * fi
        c = c_1 + c_2 * fe + c_3 * fe ** 2 + c_4 * fe ** 3 + c_5 * fe ** 4
        return a / (b + np.exp(-c)) + d

    def poly_2(p, fe, fi, adaptation):
        fe = fe + p[24] * adaptation + p[25] * fi
        a = p[0] + p[8] * adaptation + p[16] * fi + p[26] * fi ** 2
        b = p[1] + p[9] * adaptation + p[17] * fi + p[27] * fi ** 2
        c_1 = p[2] + p[10] * adaptation + p[18] * fi + p[28] * fi ** 2
        c_2 = p[3] + p[11] * adaptation + p[19] * fi + p[29] * fi ** 2
        c_3 = p[4] + p[12] * adaptation + p[20] * fi + p[30] * fi ** 2
        c_4 = p[5] + p[13] * adaptation + p[21] * fi + p[31] * fi ** 2
        c_5 = p[6] + p[14] * adaptation + p[22] * fi + p[32] * fi ** 2
        d = p[7] + p[15] * adaptation + p[23] * fi + p[33] * fi ** 2
        c = c_1 + c_2 * fe + c_3 * fe ** 2 + c_4 * fe ** 3 + c_5 * fe ** 4
        return a / (b + np.exp(-c)) + d

    def poly_3(p, fe, fi, adaptation):
        fe = fe + p[24] * adaptation + p[25] * fi + p[34] * fi ** 2
        a = p[0] + p[8] * adaptation + p[16] * fi + p[26] * fi ** 2
        b = p[1] + p[9] * adaptation + p[17] * fi + p[27] * fi ** 2
        c_1 = p[2] + p[10] * adaptation + p[18] * fi + p[28] * fi ** 2
        c_2 = p[3] + p[11] * adaptation + p[19] * fi + p[29] * fi ** 2
        c_3 = p[4] + p[12] * adaptation + p[20] * fi + p[30] * fi ** 2
        c_4 = p[5] + p[13] * adaptation + p[21] * fi + p[31] * fi ** 2
        c_5 = p[6] + p[14] * adaptation + p[22] * fi + p[32] * fi ** 2
        d = p[7] + p[15] * adaptation + p[23] * fi + p[33] * fi ** 2
        c = c_1 + c_2 * fe + c_3 * fe ** 2 + c_4 * fe ** 3 + c_5 * fe ** 4
        return a / (b + np.exp(-c)) + d

    def poly_4(p, fe, fi, adaptation):
        fe = fe + p[24] * adaptation + p[25] * fi + p[34] * fi ** 2
        a = p[0] + p[8] * adaptation + p[16] * fi + p[26] * fi ** 2 + p[35] * fi ** 3
        b = p[1] + p[9] * adaptation + p[17] * fi + p[27] * fi ** 2 + p[36] * fi ** 3
        c_1 = p[2] + p[10] * adaptation + p[18] * fi + p[28] * fi ** 2 + p[37] * fi ** 3
        c_2 = p[3] + p[11] * adaptation + p[19] * fi + p[29] * fi ** 2 + p[38] * fi ** 3
        c_3 = p[4] + p[12] * adaptation + p[20] * fi + p[30] * fi ** 2 + p[39] * fi ** 3
        c_4 = p[5] + p[13] * adaptation + p[21] * fi + p[31] * fi ** 2 + p[40] * fi ** 3
        c_5 = p[6] + p[14] * adaptation + p[22] * fi + p[32] * fi ** 2 + p[41] * fi ** 3
        d = p[7] + p[15] * adaptation + p[23] * fi + p[33] * fi ** 2 + p[42] * fi ** 3
        c = c_1 + c_2 * fe + c_3 * fe ** 2 + c_4 * fe ** 3 + c_5 * fe ** 4
        return a / (b + np.exp(-c)) + d

    def poly_5(p, fe, fi, adaptation):
        fe = fe + p[24] * adaptation + p[25] * fi + p[34] * fi ** 2 + p[43] * fi ** 3
        a = p[0] + p[8] * adaptation + p[16] * fi + p[26] * fi ** 2 + p[35] * fi ** 3
        b = p[1] + p[9] * adaptation + p[17] * fi + p[27] * fi ** 2 + p[36] * fi ** 3
        c_1 = p[2] + p[10] * adaptation + p[18] * fi + p[28] * fi ** 2 + p[37] * fi ** 3
        c_2 = p[3] + p[11] * adaptation + p[19] * fi + p[29] * fi ** 2 + p[38] * fi ** 3
        c_3 = p[4] + p[12] * adaptation + p[20] * fi + p[30] * fi ** 2 + p[39] * fi ** 3
        c_4 = p[5] + p[13] * adaptation + p[21] * fi + p[31] * fi ** 2 + p[40] * fi ** 3
        c_5 = p[6] + p[14] * adaptation + p[22] * fi + p[32] * fi ** 2 + p[41] * fi ** 3
        d = p[7] + p[15] * adaptation + p[23] * fi + p[33] * fi ** 2 + p[42] * fi ** 3
        c = c_1 + c_2 * fe + c_3 * fe ** 2 + c_4 * fe ** 3 + c_5 * fe ** 4
        return a / (b + np.exp(-c)) + d

    def poly_6(p, fe, fi, adaptation):
        fe = fe + p[24] * adaptation + p[25] * fi + p[34] * fi ** 2 + p[43] * fi ** 3
        a = p[0] + p[8] * adaptation + p[16] * fi + p[26] * fi ** 2 + p[35] * fi ** 3 + p[44] * fi ** 4
        b = p[1] + p[9] * adaptation + p[17] * fi + p[27] * fi ** 2 + p[36] * fi ** 3 + p[45] * fi ** 4
        c_1 = p[2] + p[10] * adaptation + p[18] * fi + p[28] * fi ** 2 + p[37] * fi ** 3 + p[46] * fi ** 4
        c_2 = p[3] + p[11] * adaptation + p[19] * fi + p[29] * fi ** 2 + p[38] * fi ** 3 + p[47] * fi ** 4
        c_3 = p[4] + p[12] * adaptation + p[20] * fi + p[30] * fi ** 2 + p[39] * fi ** 3 + p[48] * fi ** 4
        c_4 = p[5] + p[13] * adaptation + p[21] * fi + p[31] * fi ** 2 + p[40] * fi ** 3 + p[49] * fi ** 4
        c_5 = p[6] + p[14] * adaptation + p[22] * fi + p[32] * fi ** 2 + p[41] * fi ** 3 + p[50] * fi ** 4
        d = p[7] + p[15] * adaptation + p[23] * fi + p[33] * fi ** 2 + p[42] * fi ** 3 + p[51] * fi ** 4
        c = c_1 + c_2 * fe + c_3 * fe ** 2 + c_4 * fe ** 3 + c_5 * fe ** 4
        return a / (b + np.exp(-c)) + d

    def poly_7(p, fe, fi, adaptation):
        fe = fe + p[24] * adaptation + p[25] * fi + p[34] * fi ** 2 + p[43] * fi ** 3 + p[52] * fi ** 4
        a = p[0] + p[8] * adaptation + p[16] * fi + p[26] * fi ** 2 + p[35] * fi ** 3 + p[44] * fi ** 4
        b = p[1] + p[9] * adaptation + p[17] * fi + p[27] * fi ** 2 + p[36] * fi ** 3 + p[45] * fi ** 4
        c_1 = p[2] + p[10] * adaptation + p[18] * fi + p[28] * fi ** 2 + p[37] * fi ** 3 + p[46] * fi ** 4
        c_2 = p[3] + p[11] * adaptation + p[19] * fi + p[29] * fi ** 2 + p[38] * fi ** 3 + p[47] * fi ** 4
        c_3 = p[4] + p[12] * adaptation + p[20] * fi + p[30] * fi ** 2 + p[39] * fi ** 3 + p[48] * fi ** 4
        c_4 = p[5] + p[13] * adaptation + p[21] * fi + p[31] * fi ** 2 + p[40] * fi ** 3 + p[49] * fi ** 4
        c_5 = p[6] + p[14] * adaptation + p[22] * fi + p[32] * fi ** 2 + p[41] * fi ** 3 + p[50] * fi ** 4
        d = p[7] + p[15] * adaptation + p[23] * fi + p[33] * fi ** 2 + p[42] * fi ** 3 + p[51] * fi ** 4
        c = c_1 + c_2 * fe + c_3 * fe ** 2 + c_4 * fe ** 3 + c_5 * fe ** 4
        return a / (b + np.exp(-c)) + d
    if nb == 0:
        return poly_0
    elif nb == 1 :
        return poly_1
    elif nb == 2 :
        return  poly_2
    elif nb == 3 :
        return poly_3
    elif nb == 4 :
        return poly_4
    elif nb == 5:
        return poly_5
    elif nb == 6:
        return poly_6
    elif nb == 7:
        return poly_7
    else :
        raise Exception('bad choice for polynomial function')

def Res_generate(nb,error_function,max_err,max_rel,feOut,feSim,fiSim,adaptation):
    polynomial = poly(nb)
    if error_function == 1:
        error = error_absolute_mean
    elif error_function == 2:
        error = error_relatif_mean
    else:
        raise Exception('bad choice for error function')
    def Res(p):
        res = polynomial(p,feSim,fiSim,adaptation)
        if np.sum(np.isnan(res)) != 0 :
            return 10000000
        a = np.where(np.logical_or( np.abs(error_relatif(feOut,res)) > max_err ,np.abs(error_absolute(feOut,res)) > max_rel))[0].shape[0] * 1
        b = error(feOut,res)
        print("\r error :", a,b,end=" "); sys.stdout.flush()
        return a+b
    return Res, polynomial

def optimize_absolute(j,i,P,error_max,error_max_rel,feOut,feSim,fiSim,adaptation):
    Res, polynomial = Res_generate(j,1,error_max,error_max_rel,feOut,feSim,fiSim,adaptation)
    plsq = minimize(Res, P, method='nelder-mead',
                    options={
                        'adaptive':True,
                        'disp': True,
                        'maxiter': 50000})
    P = plsq.x
    print(P)
    fit = polynomial(P,feSim, fiSim, adaptation)
    print("step ",i," negative ",error_neg(fit),
          " max error ", index_max(feOut,fit,1)[0],
          " square error absolute ", error_absolute_mean(feOut,fit),
          " square error relative ", error_relatif_mean(feOut,fit) ,
          " error relative max ", index_max_rel(feOut,fit,1)[0])
    return P,polynomial, plsq.success

def optimize_relative(j,i,P,error_max,error_max_rel,feOut,feSim,fiSim,adaptation):
    Res, polynomial = Res_generate(j, 2, error_max, error_max_rel, feOut, feSim, fiSim, adaptation)
    plsq = minimize(Res, P, method='nelder-mead',
                    options={
                        'adaptive': True,
                        'disp': True,
                        'maxiter': 50000})
    P = plsq.x
    print(P)
    fit = polynomial(P, feSim, fiSim, adaptation)
    print("step ", i, " negative ", error_neg(fit),
          " max error ", index_max(feOut, fit, 1)[0],
          " square error absolute ", error_absolute_mean(feOut, fit),
          " square error relative ", error_relatif_mean(feOut, fit),
          " error relative max ", index_max_rel(feOut, fit, 1)[0])
    return P,polynomial, plsq.success


def fitting_all(feOut,feSim, fiSim, adaptation,max_iter=50, P=None):
    if P is None:
        P = np.ones(24)*1e-3
        error_max = 200.0
        error_max_rel = 100.0
        for j in range(0,4):
            if j==1 or j==2 or j == 3:
                P = np.concatenate((P,np.zeros(8)))
            print ("############## absolute ",j,'#############')
            for i in range(10):
                P,polynomial,success=optimize_absolute(j*2,i,P,error_max,error_max_rel,feOut,feSim,fiSim,adaptation)
            i = 10
            while not success and i < max_iter:
                P,polynomial,success=optimize_absolute(j*2, i, P, error_max, error_max_rel, feOut, feSim, fiSim, adaptation)
                i += 1
            fit = polynomial(P,feSim, fiSim, adaptation)
            error_1_val,index_1 = index_max_rel (feOut,fit,5)
            error_2_val,index_2 = index_max (feOut,fit,5)
            error_max_val,index_max_val = error_2_val[-1],index_2[-1]
            error_max_val_rel,index_max_val_rel = error_1_val[-1],index_1[-1]
            print('negative ', error_neg(fit))
            print("frequency ex",feSim[index_2]*1e3 )
            print("frequency in",fiSim[index_2]*1e3 )
            print("adaptation", adaptation[index_2])
            print("expected : ", feOut[index_2]*1e3)
            print("got : ", fit[index_2] * 1e3)
            print("error : ", error_2_val)
            print("error max : ", error_max_val)
            print("square error mean ", error_absolute_mean(feOut,fit))
            print("rel frequency ex", feSim[index_1]*1e3)
            print("rel frequency in", fiSim[index_1]*1e3)
            print("rel adaptation", adaptation[index_1])
            print("rel expected : ", feOut[index_1]*1e3)
            print("rel got : ", fit[index_1] * 1e3)
            print("rel error : ", error_1_val)
            print("rel max error ", error_max_val_rel)
            print("rel square error mean",error_relatif_mean(feOut,fit) )
            print(P)
            print ("############## relatif ",j,'#############')
            if error_max_val*2 < error_max:
                error_max = error_max_val*2
            if j == 0:
                P = np.concatenate((P,np.zeros(2)))
            else:
                P = np.concatenate((P,np.zeros(1)))
            for i in range(10):
                P,polynomial,success=optimize_relative(j * 2 + 1,i,P,error_max,error_max_rel,feOut,feSim,fiSim,adaptation)
            i=10
            while not success and i < max_iter:
                P,polynomial,success=optimize_relative(j * 2 + 1, i, P, error_max, error_max_rel, feOut, feSim, fiSim, adaptation)
                i += 1
            fit = polynomial(P,feSim, fiSim, adaptation)
            error_1_val,index_1 = index_max_rel (feOut,fit,5)
            error_2_val,index_2 = index_max (feOut,fit,5)
            error_max_val,index_max_val = error_2_val[-1],index_2[-1]
            error_max_val_rel,index_max_val_rel = error_1_val[-1],index_1[-1]
            print('negative ', error_neg(fit))
            print("frequency ex",feSim[index_2]*1e3 )
            print("frequency in",fiSim[index_2]*1e3 )
            print("adaptation", adaptation[index_2])
            print("expected : ", feOut[index_2]*1e3)
            print("got : ", fit[index_2] * 1e3)
            print("error : ", error_2_val)
            print("error max : ", error_max_val)
            print("square error mean ", error_absolute_mean(feOut,fit))
            print("rel frequency ex", feSim[index_1]*1e3)
            print("rel frequency in", fiSim[index_1]*1e3)
            print("rel adaptation", adaptation[index_1])
            print("rel expected : ", feOut[index_1]*1e3)
            print("rel got : ", fit[index_1] * 1e3)
            print("rel square error : ", error_1_val)
            print("rel max error ", error_max_val_rel)
            print("rel error mean",error_relatif_mean(feOut,fit) )
            print(P)
            if error_max_val_rel*10 < error_max_rel:
                error_max_rel = error_max_val_rel*10
    else:
        error_max = 200.0
        error_max_rel = 100.0
        j = 7
        # print ("############## absolute ",j,'#############')
        print ("############## relative ",j,'#############')
        for i in range(10):
            # P,polynomial,success=optimize_absolute(j,i,P,error_max,error_max_rel,feOut,feSim,fiSim,adaptation)
            P, polynomial, success = optimize_relative(j, i, P, error_max, error_max_rel, feOut, feSim, fiSim, adaptation)
        i = 10
        while not success and i < max_iter:
            # P,polynomial,success=optimize_absolute(j, i, P, error_max, error_max_rel, feOut, feSim, fiSim, adaptation)
            P, polynomial, success = optimize_relative(j, i, P, error_max, error_max_rel, feOut, feSim, fiSim, adaptation)
            i += 1
        fit = polynomial(P,feSim, fiSim, adaptation)
        error_1_val,index_1 = index_max_rel (feOut,fit,5)
        error_2_val,index_2 = index_max (feOut,fit,5)
        error_max_val,index_max_val = error_2_val[-1],index_2[-1]
        error_max_val_rel,index_max_val_rel = error_1_val[-1],index_1[-1]
        print('negative ', error_neg(fit))
        print("frequency ex",feSim[index_2]*1e3 )
        print("frequency in",fiSim[index_2]*1e3 )
        print("adaptation", adaptation[index_2])
        print("expected : ", feOut[index_2]*1e3)
        print("got : ", fit[index_2] * 1e3)
        print("error : ", error_2_val)
        print("error max : ", error_max_val)
        print("square error mean ", error_absolute_mean(feOut,fit))
        print("rel frequency ex", feSim[index_1]*1e3)
        print("rel frequency in", fiSim[index_1]*1e3)
        print("rel adaptation", adaptation[index_1])
        print("rel expected : ", feOut[index_1]*1e3)
        print("rel got : ", fit[index_1] * 1e3)
        print("rel error : ", error_1_val)
        print("rel max error ", error_max_val_rel)
        print("rel square error mean",error_relatif_mean(feOut,fit) )
        print(P)
    return P

# best relatif : negative  (0,) error  0.030775486301363696 max error 1.989628344177513 0.0006997061
# P = [ 2.48706143e-05, -1.08376008e+00, -8.06017871e-02,  3.57424530e-02,
#      -2.36256155e+02,  4.02008230e+05, -1.82533871e+08, -1.36790603e-01,
#       2.10043459e-08,  4.54834943e-08, -1.41195955e-07,  1.35389896e-04,
#      -4.82225233e-02, -4.14169618e+01, -2.21965980e+03, -5.80500685e-08,
#       4.46574427e-02,  4.17541703e-01,  7.88813395e-02, -1.11379588e+00,
#      -2.16842528e+04,  5.02120792e+07,  9.94423455e+09,  4.35673551e+00,
#      -4.70119380e-06, -1.92742223e-01,  2.85353434e+01,  1.33685729e+02,
#      -7.97680182e+01,  6.54333300e+03, -6.67854527e+06, -1.95808912e+09,
#      -2.26634799e+11, -9.19873659e+01, -5.10188921e+00, -1.91349396e+02,
#       7.36106821e+03,  1.83900084e+03, -1.55672049e+05,  1.78796240e+08,
#       2.73768926e+10,  2.23362460e+12,  1.05086237e+03,  1.57343585e+02,
#       4.37968013e+03,  1.04936121e+04, -4.37945531e+04,  1.18477246e+07,
#      -3.93452967e+09,  1.57511760e+11, -1.54802896e+13, -5.34872771e+03,
#      -2.23453463e+03]
# Best no relatif negative  (19,) error  0.0172547073503891 max error 0.6464085182450849
# P = [ 6.53913899e-05, -1.08365656e+00, -8.06949354e-02, -2.74085043e-01,
#       3.32298574e+02,  4.58977399e+04, -1.10779146e+08, -1.47926549e-01,
#       1.36300763e-07,  8.16842981e-07, -1.85898530e-07,  3.65388275e-04,
#      -1.83594566e-01,  1.37888135e+01, -1.00738373e+03, -2.45168993e-07,
#       1.21567479e-01,  7.21175189e-01, -1.04785590e-01, -1.25496651e+01,
#       4.26476727e+03,  7.75020390e+07,  1.61857893e+09,  4.12654774e+00,
#      -4.96916683e-06, -2.05092260e-01,  2.31862287e+01,  1.26290469e+02,
#      -4.71057944e+01, -6.73092104e+02, -1.73214072e+07, -9.67849545e+08,
#       1.76852028e+10, -8.02423106e+01, -8.83640052e-01, -1.84708370e+02,
#       6.42999302e+03,  2.70318883e+03,  1.39816957e+06,  1.21167673e+08,
#      -3.19618688e+09, -4.57149498e+11,  9.46275648e+02, -1.31327189e+01,
#       3.71633162e+02, -1.18423077e+05, -1.43658320e+05,  2.49488654e+06,
#       3.97747209e+08,  4.76531268e+10,  2.74353434e+12, -6.97026041e+03,
#       5.04122293e+02]
# for max : 1.0 : negative  (0,) error  0.03223843934546774 max error 0.999999999539869 error : 0 0.00089618
# P = [ 7.23817100e-05, -1.08359572e+00, -8.06623972e-02, -2.79091557e-01,
#       2.91820687e+02,  7.95113063e+04, -1.03919385e+08, -1.51396606e-01,
#       1.45123630e-08,  4.91131600e-07,  1.71416341e-07,  7.33029815e-04,
#      -7.06784916e-01,  1.58183894e+02, -1.64949197e+04,  8.57186737e-08,
#       1.40246886e-01,  6.52810660e-01, -2.68376179e-01, -1.82979714e-01,
#       6.43383736e+02,  7.48690048e+07,  1.11167602e+09,  4.71381365e+00,
#      -4.63629628e-06, -2.05659059e-01,  2.67677935e+01,  1.39981114e+02,
#      -5.92352853e+01, -7.95753205e+02, -1.69138649e+07, -8.48450797e+08,
#       2.09756452e+10, -8.03857636e+01, -1.09756504e-01, -6.13444026e+01,
#       8.85463916e+03,  3.02197862e+03,  1.37303493e+06,  1.57507573e+08,
#      -1.43145630e+09, -1.88663562e+11,  7.24865884e+02, -4.98916363e+01,
#       1.06151758e+03, -1.26941729e+04, -1.18752390e+05, -8.32069426e+06,
#       4.06903766e+08, -5.69477151e+10,  2.25845317e+12, -2.40576511e+03,
#       6.20951990e+02]
# for max 0.64 : negative  (0,) error  0.029394987969012635 max error 0.6399999999474517 error : 0 0.0012829
# P = [ 7.31843533e-05, -1.08359622e+00, -8.06635004e-02, -3.01119503e-01,
#       3.38763744e+02,  5.43755038e+04, -1.07213020e+08, -1.51964562e-01,
#       6.48699130e-08,  6.23323770e-07, -5.48399834e-09,  6.86977345e-04,
#      -5.97067016e-01,  1.34837832e+02, -1.08171768e+04, -1.64419480e-07,
#       1.39476948e-01,  7.51893956e-01, -1.65240471e-01, -6.87752341e+00,
#       1.18738246e+03,  7.70290627e+07,  1.42695554e+09,  4.15191902e+00,
#      -4.76962624e-06, -1.99112720e-01,  2.65890337e+01,  1.26270718e+02,
#      -6.70000163e+01, -1.96737044e+02, -1.76020182e+07, -8.89561646e+08,
#       1.45806164e+10, -7.32212096e+01, -1.14573120e+00, -1.02041303e+02,
#       7.75804878e+03,  3.10188827e+03,  1.37631578e+06,  1.40370976e+08,
#      -2.63150209e+09, -3.42746867e+11,  7.47765189e+02,  5.99501352e+00,
#       8.98912098e+02, -5.76170395e+04, -1.21488799e+05, -8.85941645e+04,
#       1.50562057e+08,  1.87382279e+10,  3.21672777e+12, -4.04478909e+03,
#      -4.84651190e-03]
# for max 0.6 : negative  (0,) error  0.028975739120756974 max error 0.5999999999793015 error  0.003098422448242226 max error 2.0362274683951616
# P = [ 6.81461530e-05, -1.08362757e+00, -8.06674949e-02, -2.79082829e-01,
#       3.31249618e+02,  4.21260083e+04, -1.07554018e+08, -1.52712203e-01,
#       1.42310908e-07,  8.70012331e-07, -1.74407208e-07,  3.79352370e-04,
#      -1.73055180e-01,  1.62683180e+01, -1.90923470e+03, -4.39117097e-07,
#       1.27756614e-01,  7.28991896e-01, -1.07965974e-01, -1.99877134e+01,
#       8.32174097e+03,  7.66961879e+07,  1.43579405e+09,  4.03915637e+00,
#      -4.85849513e-06, -1.98749305e-01,  2.63735902e+01,  1.33003390e+02,
#      -5.53088326e+01, -5.20016957e+02, -1.76188593e+07, -9.11955771e+08,
#       1.45957881e+10, -8.05078227e+01, -1.62528008e+00, -1.91517399e+02,
#       6.97966233e+03,  3.16915679e+03,  1.42824603e+06,  1.34698207e+08,
#      -2.46921403e+09, -3.09141604e+11,  8.58709038e+02,  1.93929329e+01,
#       3.43319799e+03, -6.45067308e+04, -1.11760865e+05, -6.38063108e+05,
#       2.17818798e+08,  3.56655362e+10,  1.40635626e+12, -5.69424251e+03,
#       2.16154048e-03]


# 2.44  0.08 rel : 0.681 0.0013
# P = [ 8.41761692e-03, -1.71450419e+00, -5.70188839e-01, -7.42896365e+00,
#       9.29248083e+03,  1.47909181e+06, -7.82236433e+08, -1.49310341e-01,
#       6.89331185e-06,  1.36740353e-04,  5.31188826e-05, -5.39751308e-04,
#      -9.67408439e+00,  2.93374191e+03, -3.91514491e+05,  3.12075286e-06,
#       5.67191987e+00,  6.52689805e+01,  1.52852512e+01,  1.37874090e+03,
#      -8.58396133e+05,  1.70685220e+08,  4.46063938e+10, -8.35481965e-01,
#      -4.02671470e-06, -2.43307364e-01,  2.49046582e+02,  8.57251151e+02,
#      -1.96083857e+02, -6.90152944e+04,  2.76377832e+07, -9.15723935e+09,
#      -6.52484198e+11, -1.17003042e+01, -6.25296828e+00, -4.95977066e+02,
#       2.46214014e+03,  6.55188098e+03,  1.42575366e+06, -1.68710232e+08,
#       4.45575355e+10,  2.72538317e+12,  4.01955016e+02,  1.52892475e+02,
#      -2.24268258e+04,  4.47898930e+04,  8.74263364e+04, -9.99614746e+06,
#      -2.22149903e+09,  1.44217964e+12,  2.58699139e+13,  2.82616483e+03,
#      -1.69992132e+03]
# PI 1.89 0.061 rel : 0.49 0.001058
# P = [ 1.57155672e-02, -9.73579687e+00, -2.28843693e+00, -6.33615583e+00,
#       9.68186984e+03, -9.12738062e+05, -4.28640803e+07, -1.17189112e-01,
#       3.69641542e-05,  5.08564159e-04,  1.72208471e-05,  1.04701445e-02,
#      -9.13207395e+00,  2.47190069e+03, -2.42286008e+05,  7.80929815e-07,
#       1.13937124e+01,  2.88255592e+02,  1.93480077e+01,  2.02201486e+02,
#      -9.63795607e+05,  3.67255677e+08, -2.58140460e+10,  5.99231507e-01,
#      -4.26576904e-06, -1.48261411e-01,  8.31208374e+01,  8.27004637e+01,
#       6.46698830e+01,  1.95610776e+04, -1.86965915e+06, -8.58274030e+09,
#       1.08589518e+12,  3.11319841e-01, -4.93767698e+00,  1.73650932e+03,
#       3.91863396e+04,  2.05483352e+03,  9.57552860e+05,  3.13716136e+08,
#      -2.61525263e+10, -5.91692093e+12,  9.57708891e+01,  1.23507625e+02,
#       2.60273984e+03, -1.92178067e+05, -3.86395060e+04, -2.84000803e+07,
#       2.32828823e+09,  7.07126397e+11, -5.58632058e+13, -2.26873929e+03,
#      -1.29019402e+03]


# mean with all data
# fe : 0.837713988694207 14.26223514 0.004632524062718132 1.63769071
# P = [ 7.96851636e-04  2.43292734e-04 -1.27160568e+00  4.61891856e+03
#  -2.02617034e+05  4.49678489e+06 -4.21311861e+07 -1.79840328e-03
#   1.98220157e-06  1.38717857e-04  2.23051620e-03 -3.44990926e-01
#   2.58035294e+01 -9.08373404e+02  1.12463681e+04  1.15766293e-07
#   5.97127823e-01  2.21117037e+01 -1.16181226e+04  4.22048462e+05
#  -7.80831129e+06  4.85941461e+07  2.16718723e+08  3.04303054e-01
#  -4.92154225e-06  2.33514815e+00 -2.64970319e+02 -8.45403991e+03
#   2.50860945e+05 -5.85130974e+06  3.23353267e+07  1.08054895e+09
#  -1.37748645e+10 -2.09695673e+01 -6.51699599e+01  1.14263804e+05
#   3.19567495e+06 -1.25658608e+06 -1.03251909e+07  1.36540046e+09
#  -2.49815768e+10  4.19922218e+10  6.07601321e+02  2.74250281e+02
#  -1.48813775e+06 -7.83828597e+07  3.65829583e+06 -1.12953903e+08
#  -2.77521370e+09 -1.67736986e+10  2.06838793e+12 -6.17791376e+03
#   2.14997688e+03]
# fi : 0.6394731783356193 15.95839027 0.0039545857919039825 1.74841215
# P = [ 1.19794649e-02 -2.62148886e-02 -4.11722064e+00  5.56131190e+03
#  -4.14745715e+05  1.62432246e+07 -2.61689933e+08 -1.38278906e-03
#   7.07963946e-06  1.53519036e-03  3.29844718e-03 -5.78277123e-01
#   3.35461302e+01 -8.92403700e+02  1.01333084e+04  2.92895929e-07
#   4.59448215e+00  2.61783955e+02 -8.60237717e+03  5.86750238e+05
#  -2.31455646e+07  3.46503485e+08  6.16411582e+08  2.20396214e-01
#  -4.55015011e-06  1.38513760e+00 -5.11894707e+02 -5.26342943e+04
#   1.34006494e+05 -3.36420024e+06  5.38002816e+07  1.87718873e+09
#  -7.18165612e+10 -1.46563690e+01 -4.20094940e+01  4.44953365e+05
#   1.46072651e+07 -6.47260789e+05 -6.19001213e+06 -1.05650855e+08
#  -3.26199558e+10  6.11535215e+11  4.11320152e+02  2.43076999e+02
#  -4.63142590e+06 -3.79972350e+08 -7.23010876e+05  1.53570824e+07
#   5.07901457e+09  1.33129461e+11  8.28905737e+11 -4.04749977e+03
#   9.90206799e+02]

# mean for feout under 20
# fe  0.48645767916455185 3.69881449 0.007077474634490442 2.27167247
# P = [-8.88663348e-05 -1.50040911e-01  1.89666489e+00  2.32618112e-03
#  -2.97869057e+00  4.57065957e+01 -8.71827921e+03  3.25489522e+00
#  -7.78604897e-08 -1.23523868e-06 -8.39868220e-06  2.11757895e-05
#  -4.94904921e-04  1.27046926e-02 -8.92098500e-02  7.12128750e-06
#  -7.16098927e-02 -1.61166299e-01 -1.22328281e+00  2.45195499e+00
#   1.03652682e+02  6.03029511e+03  1.80687171e+05 -3.09022869e+01
#  -8.89399959e-07  2.42860448e-01 -4.46410213e-01  2.15786614e-01
#  -6.51280449e-01 -8.97404589e+01 -1.95435928e+03 -5.53687578e+04
#  -1.85208470e+06 -5.43180345e+01 -2.90358632e+00  2.93392908e-01
#   6.89402374e-01 -2.73722122e+00 -6.61889354e+01 -6.78509312e+03
#   4.28397981e+05  2.04902870e+06  1.65404537e+03  1.62559777e+02
#  -8.53579951e+00  3.41061866e+00  5.88334539e+00  9.10322913e+01
#  -1.52144864e+04  2.15749240e+06  2.17851436e+07 -5.00734633e+03
#  -2.21472547e+03]

# fi : 0.09908651711711015  2.82899042 0.0011945792954227142 0.38215103
# P = [ 3.24744717e-05 -2.08221868e-02  3.85734422e+00 -7.95801382e+00
#   1.14991239e+04  3.64776935e+04 -6.71851199e+07 -9.83368234e-02
#   1.00373187e-07 -2.50027609e-07 -6.11536015e-05  8.46221467e-03
#  -1.08394825e+01  2.59326020e+03 -2.61865917e+05  1.03443743e-07
#   2.66954826e-02  2.23151727e-01 -2.10552146e+00  1.18085768e+02
#  -1.25845767e+06  2.99779991e+08 -7.53331020e+09 -2.08478322e-01
#  -3.97026562e-06 -1.31397436e-01  1.80319154e+00  2.59588107e+01
#   3.79033284e+02  2.99774696e+04  2.43866686e+07 -1.35817175e+10
#   7.95203469e+11  1.11190769e+01 -4.86022977e+00  1.22797072e+00
#  -3.56117613e+01 -2.46060375e+03 -6.50904706e+05  1.21287257e+08
#   1.18986506e+11 -1.01192714e+13 -3.33673659e+01  1.34478997e+02
#  -4.00375785e+01 -2.81113703e+01 -1.08305325e+04 -4.85948226e+06
#   2.50616759e+07 -1.64708476e+11  2.60641987e+13 -9.71182610e+02
#  -1.67048533e+03]


# WITH BEST RUN AND MEAN
# short max_iter = 20 fe :
# negative  (0,)
# frequency ex [1.47 1.17 1.5  1.32 1.4 ]
# frequency in [0. 0. 0. 0. 0.]
# adaptation [ 94.74  31.58 100.    63.16  78.95]
# expected :  [19.67 19.91 19.7  19.97 19.9 ]
# got :  [22.71 22.96 22.91 23.2  23.23]
# error :  [3.05 3.06 3.21 3.23 3.34]
# error max :  3.338805187123733
# square error mean  0.09085456978613314
# rel frequency ex [9.05 1.   0.56 0.67 0.56]
# rel frequency in [27.37  2.11  0.    0.    0.  ]
# rel adaptation [73.68 15.79  5.26 47.37 15.79]
# rel expected :  [0.1  0.33 0.4  0.14 0.18]
# rel got :  [0.07 0.22 0.56 0.08 0.1 ]
# rel square error :  [0.34 0.34 0.37 0.38 0.42]
# rel max error  0.41998069842543884
# rel error mean 0.0011746541670562887
# 'P_e':[-9.13e-02, -7.42e-01,  1.64e-01,  7.25e+00, -7.98e+03, -9.66e+05,
#   5.73e+07,  8.62e-01, -6.01e-05,  4.13e-05, -2.66e-05, -1.85e-02,
#   6.84e+00, -1.06e+03,  6.53e+04,  7.85e-06, -7.12e+01,  1.12e+02,
#   3.39e+01, -7.45e+01,  1.26e+06, -1.37e+08,  3.24e+09, -5.98e+00,
#  -5.19e-06, -1.41e-01,  1.74e+02, -1.21e+02,  1.50e+01, -7.16e+04,
#  -2.27e+07,  5.30e+09, -1.73e+11,  2.11e+01, -5.25e+00,  3.86e+03,
#   6.27e+01, -1.44e+03,  8.43e+05,  1.31e+08, -5.46e+10,  7.24e+11,
#  -2.69e+02,  1.01e+02,  5.57e+03,  7.89e+03,  7.19e+04, -2.47e+06,
#   1.41e+09, -1.78e+11,  3.05e+13, -2.38e+03, -1.09e+03],
# negative  (46,)
# frequency ex [0.69416667 1.17083333 0.66666667 0.795      1.01328125]
# frequency in [0. 0. 0. 0. 0.]
# adaptation [52.63157895 31.57894737 47.36842105 84.21052632  0.        ]
# expected :  [ 0.18       19.906       0.13673469  0.122      19.858     ]
# got :  [-0.94060643 21.07727614 -1.0740292  -1.12445083 21.11822562]
# error :  [1.12060643 1.17127614 1.2107639  1.24645083 1.26022562]
# error max :  1.2602256163696675
# square error mean  0.02703163162636069
# rel frequency ex [0.55575    0.99666667 0.69416667 0.66666667 0.795     ]
# rel frequency in [0.         2.10526316 0.         0.         0.        ]
# rel adaptation [15.78947368 31.57894737 52.63157895 47.36842105 84.21052632]
# rel expected :  [0.18       0.108      0.18       0.13673469 0.122     ]
# rel got :  [-0.86925487 -0.55791893 -0.94060643 -1.0740292  -1.12445083]
# rel error :  [ 5.8291937   6.16591602  6.22559127  8.85484045 10.21681008]
# rel max error  10.216810075225894
# rel square error mean 0.059395024332743414
# [-1.28215423e-01 -7.11957088e-01  1.51404311e-01  3.55159410e+00
#  -7.74029279e+03 -6.41886122e+05  3.57275446e+08  8.67200762e-01
#  -2.40284496e-04  2.63562089e-04 -1.59201328e-05  8.46801016e-03
#  -6.07099536e+00  3.14539971e+03 -2.79297988e+05  1.89575403e-05
#  -7.24225665e+01  1.12331876e+02  3.20530472e+01  2.14811881e+01
#   4.30407779e+05 -2.03353217e+08  1.29783583e+09 -6.30070165e+00
#  -4.30720109e-06 -2.19330079e-01  3.03166300e+02 -1.20226242e+02
#   9.54663509e+01 -2.43631268e+04 -3.86287157e+06  6.88880593e+09
#  -4.22521197e+11  2.46750156e+01 -8.45025447e+00  4.67649563e+03
#  -2.65451498e+03 -6.40776167e+02 -1.44923200e+05 -3.11556743e+08
#  -9.13465816e+10  1.03568408e+13 -7.57000933e+02  1.17392520e+02
#   2.08540571e+04  1.92957818e+02  4.47174478e+04  1.61177285e+07
#   5.67229902e+09  4.45074504e+11 -9.35400810e+13  6.10711521e+01
#   3.42796141e+17]
# 'P_e':[-1.28215423e-01, -7.11957088e-01,  1.51404311e-01,  3.55159410e+00,
#  -7.74029279e+03, -6.41886122e+05,  3.57275446e+08,  8.67200762e-01,
#  -2.40284496e-04,  2.63562089e-04, -1.59201328e-05,  8.46801016e-03,
#  -6.07099536e+00,  3.14539971e+03, -2.79297988e+05,  1.89575403e-05,
#  -7.24225665e+01,  1.12331876e+02,  3.20530472e+01,  2.14811881e+01,
#   4.30407779e+05, -2.03353217e+08,  1.29783583e+09, -6.30070165e+00,
#  -4.30720109e-06, -2.19330079e-01,  3.03166300e+02, -1.20226242e+02,
#   9.54663509e+01, -2.43631268e+04, -3.86287157e+06,  6.88880593e+09,
#  -4.22521197e+11,  2.46750156e+01, -8.45025447e+00,  4.67649563e+03,
#  -2.65451498e+03, -6.40776167e+02, -1.44923200e+05, -3.11556743e+08,
#  -9.13465816e+10,  1.03568408e+13, -7.57000933e+02,  1.17392520e+02,
#   2.08540571e+04,  1.92957818e+02,  4.47174478e+04,  1.61177285e+07,
#   5.67229902e+09,  4.45074504e+11, -9.35400810e+13,  6.10711521e+01,
#   3.42796141e+17],


# short max_iter = 50 fi :
# negative  (0,)
# frequency ex [1.07916667 0.89354167 0.86833333 0.99941667 0.843125  ]
# frequency in [0. 0. 0. 0. 0.]
# adaptation [47.36842105 10.52631579  5.26315789 31.57894737  0.        ]
# expected :  [19.992 19.328 19.352 19.608 19.232]
# got :  [22.65421153 22.00152415 22.05166113 22.3448265  22.10753931]
# error :  [2.66221153 2.67352415 2.69966113 2.7368265  2.87553931]
# error max :  2.875539313292621
# square error mean  0.07209047736957777
# rel frequency ex [5.6752083  6.32478067 9.05298461 2.60596667 4.07006667]
# rel frequency in [18.94736842 23.15789474 31.57894737  8.42105263 14.73684211]
# rel adaptation [ 94.73684211   5.26315789  36.84210526 100.          89.47368421]
# rel expected :  [0.25918367 0.222      0.1        0.296      0.1       ]
# rel got :  [0.32513134 0.16479417 0.12613947 0.21422962 0.14011471]
# rel square error :  [0.25444375 0.25768391 0.2613947  0.2762513  0.40114708]
# rel max error  0.4011470766756015
# rel error mean 0.000991977537213356
# 'P_i':[ 4.62640386e-03, -1.60263399e+00, -4.82618284e-01, -2.85592315e+00,
#   3.55735392e+03,  4.36121194e+05,  5.77631251e+06, -2.49183323e-01,
#   1.94023554e-05,  1.07459955e-04,  1.60297243e-05,  6.99812250e-03,
#  -3.58760652e+00,  5.60439874e+02, -3.45074629e+04,  4.54339345e-06,
#   4.75851959e+00,  4.32939661e+01,  1.52486219e+01, -3.69241724e+02,
#  -5.24210904e+05,  8.04236488e+07, -2.99721794e+09, -2.15972585e+00,
#  -4.32915579e-06, -5.20013063e-02,  5.06536955e+02,  1.17886480e+03,
#  -3.10554781e+02,  7.47938979e+04, -1.55630405e+06, -2.22217018e+09,
#   9.51638164e+10,  1.38856189e+01, -9.10006451e+00, -1.20851322e+03,
#  -2.07354767e+03,  3.25514222e+03, -9.81067771e+05,  9.69584325e+07,
#   1.04980999e+10, -6.40090805e+10, -8.72269744e+01,  2.44727515e+02,
#   4.53308904e+03, -1.90861273e+04,  1.24028643e+04,  6.15360284e+06,
#   1.80661772e+09, -1.71477940e+11, -2.63231820e+12, -3.86034305e+03,
#  -2.30302648e+03],

# negative  (35,)
# frequency ex [0.66666667 0.69416667 0.66666667 0.465      0.55575   ]
# frequency in [0. 0. 0. 0. 0.]
# adaptation [68.42105263 78.94736842 73.68421053 15.78947368 42.10526316]
# expected :  [0.228 0.168 0.132 0.162 0.168]
# got :  [-0.67687712 -0.82160184 -0.95423239 -0.94435983 -0.97827233]
# error :  [0.90487712 0.98960184 1.08623239 1.10635983 1.14627233]
# error max :  1.1462723266336945
# square error mean  0.02864523402514079
# rel frequency ex [0.99666667 0.69416667 0.55575    0.465      0.66666667]
# rel frequency in [2.10526316 0.         0.         0.         0.        ]
# rel adaptation [73.68421053 78.94736842 42.10526316 15.78947368 73.68421053]
# rel expected :  [0.126 0.168 0.168 0.162 0.132]
# rel got :  [-0.49598356 -0.82160184 -0.97827233 -0.94435983 -0.95423239]
# rel error :  [4.93637746 5.89048712 6.82304956 6.82938166 8.22903327]
# rel max error  8.229033274935427
# rel square error mean 0.04563300765545849
# [ 1.05412523e-02 -1.59611042e+00 -4.98800039e-01 -2.73687732e+00
#   7.01100139e+03  3.56826299e+05 -3.40024437e+07 -2.09649575e-01
#   2.70407383e-05  2.28733821e-04  5.94955901e-05  7.50518888e-03
#  -1.45704138e+00  6.20314013e+01  1.41532697e+03  7.31582451e-06
#   6.92673971e+00  5.58565104e+01  1.46945925e+01 -1.33658276e+03
#  -4.71835951e+05  8.30549556e+07 -2.06748130e+09 -3.12083983e+00
#  -4.57027151e-06 -7.71722577e-02  5.08945478e+02  8.07373552e+02
#  -5.28836355e+02  9.07176722e+04 -1.30340316e+06 -2.23370768e+09
#   8.83413554e+10 -9.61792134e+00 -7.66185229e+00 -1.64996341e+03
#  -7.39227956e+03  4.53448698e+03 -1.11452566e+06  1.39150623e+08
#   1.36436661e+10 -2.80527759e+11 -1.16118770e+02  8.44679046e+01
#   3.59260506e+04 -4.69827051e+04  5.11620195e+04 -3.24114309e+06
#   4.31942611e+08 -1.24180209e+11 -4.24740632e+12 -1.63277065e+04
#   7.28520521e+17]
# 'P_i':[ 1.05412523e-02, -1.59611042e+00, -4.98800039e-01, -2.73687732e+00,
#   7.01100139e+03,  3.56826299e+05, -3.40024437e+07, -2.09649575e-01,
#   2.70407383e-05,  2.28733821e-04,  5.94955901e-05,  7.50518888e-03,
#  -1.45704138e+00,  6.20314013e+01,  1.41532697e+03,  7.31582451e-06,
#   6.92673971e+00,  5.58565104e+01,  1.46945925e+01, -1.33658276e+03,
#  -4.71835951e+05,  8.30549556e+07, -2.06748130e+09, -3.12083983e+00,
#  -4.57027151e-06, -7.71722577e-02,  5.08945478e+02,  8.07373552e+02,
#  -5.28836355e+02,  9.07176722e+04, -1.30340316e+06, -2.23370768e+09,
#   8.83413554e+10, -9.61792134e+00, -7.66185229e+00, -1.64996341e+03,
#  -7.39227956e+03,  4.53448698e+03, -1.11452566e+06,  1.39150623e+08,
#   1.36436661e+10, -2.80527759e+11, -1.16118770e+02,  8.44679046e+01,
#   3.59260506e+04, -4.69827051e+04,  5.11620195e+04, -3.24114309e+06,
#   4.31942611e+08, -1.24180209e+11, -4.24740632e+12, -1.63277065e+04,
#   7.28520521e+17],





# Test 2
# negative  (41,)
# frequency ex [0.795      0.55575    0.69416667 0.66666667 0.795     ]
# frequency in [0. 0. 0. 0. 0.]
# adaptation [78.94736842 15.78947368 52.63157895 47.36842105 84.21052632]
# expected :  [0.18       0.18       0.18       0.13673469 0.122     ]
# got :  [-0.99831254 -1.02985226 -1.05361982 -1.19377392 -1.26577716]
# error :  [1.17831254 1.20985226 1.23361982 1.33050861 1.38777716]
# error max :  1.387777163454107
# square error mean  0.025341796544982313
# rel frequency ex [0.795      0.55575    0.69416667 0.66666667 0.795     ]
# rel frequency in [0. 0. 0. 0. 0.]
# rel adaptation [78.94736842 15.78947368 52.63157895 47.36842105 84.21052632]
# rel expected :  [0.18       0.18       0.18       0.13673469 0.122     ]
# rel got :  [-0.99831254 -1.02985226 -1.05361982 -1.19377392 -1.26577716]
# rel error :  [ 6.5461808   6.72140145  6.85344347  9.73058538 11.37522265]
# rel max error  11.375222651263174
# rel square error mean 0.06908963908886914
# [-1.30373916e-01 -7.22228608e-01  1.29609536e-01  4.34595451e+00
#  -9.91680746e+03  3.23592288e+05  4.27932805e+08  8.32576285e-01
#  -1.79368764e-04  2.51520824e-04  4.18238984e-05 -1.74912455e-02
#   2.46095413e+00 -5.58706132e+02  5.34560848e+04  6.84308503e-06
#  -6.92859073e+01  1.10446455e+02  2.93951337e+01 -4.77262331e+02
#   3.02755396e+05 -2.43075351e+08 -5.52479605e+09 -6.64698235e+00
#  -5.67612685e-06 -2.70769110e-01  1.09615191e+02  4.02240626e+01
#  -1.10710923e+02 -1.63814183e+04  5.38287667e+06  6.11155881e+09
#  -1.48598921e+11  4.37197718e+01 -6.83397939e+00  3.55360616e+03
#   2.89549327e+03 -1.82073888e+03  1.27854359e+06 -6.15088489e+07
#  -6.42128756e+10  5.28842102e+12 -2.59104456e+02  2.00943232e+02
#   3.80950250e+04 -4.48904538e+04  2.45862854e+05 -1.91221130e+07
#  -8.32334927e+08  2.26381202e+11 -5.55559419e+13 -9.03476664e+03
#  -2.00337742e+03]
# 'P_e':[-1.30373916e-01, -7.22228608e-01,  1.29609536e-01,  4.34595451e+00,
#  -9.91680746e+03,  3.23592288e+05,  4.27932805e+08,  8.32576285e-01,
#  -1.79368764e-04,  2.51520824e-04,  4.18238984e-05, -1.74912455e-02,
#   2.46095413e+00, -5.58706132e+02,  5.34560848e+04,  6.84308503e-06,
#  -6.92859073e+01,  1.10446455e+02,  2.93951337e+01, -4.77262331e+02,
#   3.02755396e+05, -2.43075351e+08, -5.52479605e+09, -6.64698235e+00,
#  -5.67612685e-06, -2.70769110e-01,  1.09615191e+02,  4.02240626e+01,
#  -1.10710923e+02, -1.63814183e+04,  5.38287667e+06,  6.11155881e+09,
#  -1.48598921e+11,  4.37197718e+01, -6.83397939e+00,  3.55360616e+03,
#   2.89549327e+03, -1.82073888e+03,  1.27854359e+06, -6.15088489e+07,
#  -6.42128756e+10,  5.28842102e+12, -2.59104456e+02,  2.00943232e+02,
#   3.80950250e+04, -4.48904538e+04,  2.45862854e+05, -1.91221130e+07,
#  -8.32334927e+08,  2.26381202e+11, -5.55559419e+13, -9.03476664e+03,
#  -2.00337742e+03],

# negative  (0,)
# frequency ex [1.4680625  1.17083333 1.49579167 1.324375   1.4       ]
# frequency in [0. 0. 0. 0. 0.]
# adaptation [ 94.73684211  31.57894737 100.          63.15789474  78.94736842]
# expected :  [19.668 19.906 19.696 19.972 19.896]
# got :  [22.64332183 22.9639134  22.8301695  23.16222824 23.17526169]
# error :  [2.97532183 3.0579134  3.1341695  3.19022824 3.27926169]
# error max :  3.2792616908518255
# square error mean  0.08512695459541807
# rel frequency ex [0.99666667 0.55575    9.05298461 0.66666667 0.55575   ]
# rel frequency in [ 2.10526316  0.         27.36842105  0.          0.        ]
# rel adaptation [15.78947368  5.26315789 73.68421053 47.36842105 15.78947368]
# rel expected :  [0.326      0.404      0.1        0.13673469 0.18      ]
# rel got :  [0.2175667  0.54540867 0.06481112 0.088039   0.10310378]
# rel error :  [0.33261749 0.35002145 0.35188882 0.35613269 0.42720122]
# rel max error  0.4272012213266294
# rel square error mean 0.0011382753442775975
# [-8.89884466e-02 -7.43154123e-01  1.65415198e-01  7.37311175e+00
#  -8.17474996e+03 -7.98280766e+05  6.92627746e+07  8.63452980e-01
#  -6.51213947e-05  5.41440099e-05 -1.81445547e-05 -1.97554924e-02
#   9.13616344e+00 -1.67837685e+03  1.13826623e+05  7.33429555e-06
#  -7.13046906e+01  1.11768545e+02  3.35088802e+01 -2.44246968e+02
#   1.18993276e+06 -1.66158445e+08  4.34286695e+09 -5.97824279e+00
#  -5.13178135e-06 -1.51121741e-01  1.71180551e+02 -1.27804017e+02
#  -1.27383565e+01 -4.68857600e+04 -2.28624744e+07  6.48644097e+09
#  -2.43778997e+11  2.23723854e+01 -6.39731674e+00  4.26717235e+03
#   1.96213117e+02 -1.91312660e+03  6.84265449e+05  7.16282807e+07
#  -5.68302554e+10  9.70090535e+11 -2.96352599e+02  1.47253497e+02
#   1.08286311e+04 -1.06731276e+04  7.24084012e+04 -2.91668189e+05
#   1.98978762e+09 -4.08479384e+11  4.62844281e+13 -2.47482765e+03
#  -1.76273860e+03]
# 'P_e':[-8.89884466e-02, -7.43154123e-01,  1.65415198e-01,  7.37311175e+00,
#  -8.17474996e+03, -7.98280766e+05,  6.92627746e+07,  8.63452980e-01,
#  -6.51213947e-05,  5.41440099e-05, -1.81445547e-05, -1.97554924e-02,
#   9.13616344e+00, -1.67837685e+03,  1.13826623e+05,  7.33429555e-06,
#  -7.13046906e+01,  1.11768545e+02,  3.35088802e+01, -2.44246968e+02,
#   1.18993276e+06, -1.66158445e+08,  4.34286695e+09, -5.97824279e+00,
#  -5.13178135e-06, -1.51121741e-01,  1.71180551e+02, -1.27804017e+02,
#  -1.27383565e+01, -4.68857600e+04, -2.28624744e+07,  6.48644097e+09,
#  -2.43778997e+11,  2.23723854e+01, -6.39731674e+00,  4.26717235e+03,
#   1.96213117e+02, -1.91312660e+03,  6.84265449e+05,  7.16282807e+07,
#  -5.68302554e+10,  9.70090535e+11, -2.96352599e+02,  1.47253497e+02,
#   1.08286311e+04, -1.06731276e+04,  7.24084012e+04, -2.91668189e+05,
#   1.98978762e+09, -4.08479384e+11,  4.62844281e+13, -2.47482765e+03,
#  -1.76273860e+03],

# Fi
# negative  (35,)
# frequency ex [0.55575    0.465      0.66666667 0.55575    0.465     ]
# frequency in [0. 0. 0. 0. 0.]
# adaptation [36.84210526 10.52631579 73.68421053 42.10526316 15.78947368]
# expected :  [0.212 0.298 0.132 0.168 0.162]
# got :  [-0.71767838 -0.65069243 -0.88393678 -1.01996369 -1.03766791]
# error :  [0.92967838 0.94869243 1.01593678 1.18796369 1.19966791]
# error max :  1.199667909368545
# square error mean  0.024004553046528466
# rel frequency ex [0.69416667 2.20666667 0.55575    0.465      0.66666667]
# rel frequency in [0.         8.42105263 0.         0.         0.        ]
# rel adaptation [78.94736842 52.63157895 42.10526316 15.78947368 73.68421053]
# rel expected :  [0.168 0.106 0.168 0.162 0.132]
# rel got :  [-0.75015685  0.69289565 -1.01996369 -1.03766791 -0.88393678]
# rel error :  [5.46521932 5.53675138 7.07121244 7.40535747 7.69649079]
# rel max error  7.696490785341718
# rel square error mean 0.04715396109482017
# [ 8.70041423e-03 -1.59613060e+00 -4.87817867e-01 -2.30034350e+00
#   5.07192063e+03 -2.92696646e+05 -2.82081573e+08 -2.66109589e-01
#   1.72762986e-05  6.54307846e-05  7.40096787e-07  2.56049685e-03
#  -7.51671140e-01  1.57786698e+01 -2.07766710e+04  3.16804004e-06
#   5.39029349e+00  4.38341108e+01  1.48034952e+01 -1.79670452e+02
#  -1.03039697e+05  1.70459635e+08  4.19484286e+09 -2.46311614e+00
#  -4.64010008e-06 -1.82035576e-01  5.20546050e+02  1.24783725e+03
#  -2.33908711e+02  4.51248760e+04 -1.05278351e+07 -3.18837572e+09
#   2.83514146e+10 -1.04425010e+01 -9.27726022e+00 -3.30841870e+02
#  -4.59530173e+03  6.20217032e+03 -1.57158691e+06  1.50265235e+08
#  -7.72002980e+09  5.33317050e+11 -1.00406908e+03  2.90678880e+02
#   2.39186491e+03 -5.02478671e+04  6.12597656e+04  1.45342885e+07
#   3.05847909e+09 -2.60371420e+11  3.92114335e+13  1.02536585e+04
#  -3.15777819e+03]
# 'P_i':[ 8.70041423e-03, -1.59613060e+00, -4.87817867e-01, -2.30034350e+00,
#   5.07192063e+03, -2.92696646e+05, -2.82081573e+08, -2.66109589e-01,
#   1.72762986e-05,  6.54307846e-05,  7.40096787e-07,  2.56049685e-03,
#  -7.51671140e-01,  1.57786698e+01, -2.07766710e+04,  3.16804004e-06,
#   5.39029349e+00,  4.38341108e+01,  1.48034952e+01, -1.79670452e+02,
#  -1.03039697e+05,  1.70459635e+08,  4.19484286e+09, -2.46311614e+00,
#  -4.64010008e-06, -1.82035576e-01,  5.20546050e+02,  1.24783725e+03,
#  -2.33908711e+02,  4.51248760e+04, -1.05278351e+07, -3.18837572e+09,
#   2.83514146e+10, -1.04425010e+01, -9.27726022e+00, -3.30841870e+02,
#  -4.59530173e+03,  6.20217032e+03, -1.57158691e+06,  1.50265235e+08,
#  -7.72002980e+09,  5.33317050e+11, -1.00406908e+03,  2.90678880e+02,
#   2.39186491e+03, -5.02478671e+04,  6.12597656e+04,  1.45342885e+07,
#   3.05847909e+09, -2.60371420e+11,  3.92114335e+13,  1.02536585e+04,
#  -3.15777819e+03],

# negative  (0,)
# frequency ex [1.02714583 0.86833333 1.07916667 0.99941667 0.843125  ]
# frequency in [0. 0. 0. 0. 0.]
# adaptation [36.84210526  5.26315789 47.36842105 31.57894737  0.        ]
# expected :  [19.928 19.352 19.992 19.608 19.232]
# got :  [22.51631394 21.94044878 22.63122784 22.29280526 21.9816584 ]
# error :  [2.58831394 2.58844878 2.63922784 2.68480526 2.7496584 ]
# error max :  2.7496583979814937
# square error mean  0.07067323162124238
# rel frequency ex [6.32478067 9.05298461 5.6752083  2.60596667 4.07006667]
# rel frequency in [23.15789474 31.57894737 18.94736842  8.42105263 14.73684211]
# rel adaptation [  5.26315789  36.84210526  94.73684211 100.          89.47368421]
# rel expected :  [0.222      0.1        0.25918367 0.296      0.1       ]
# rel got :  [0.16468486 0.12641196 0.32820944 0.21553456 0.14043439]
# rel error :  [0.25817631 0.26411959 0.2663199  0.27184271 0.40434388]
# rel max error  0.4043438839822506
# rel square error mean 0.0009792767226211123
# [ 4.64341057e-03 -1.60270353e+00 -4.82615247e-01 -2.84105222e+00
#   3.55482995e+03  4.05471532e+05 -3.66207894e+06 -2.51177494e-01
#   1.85738285e-05  1.01768190e-04  1.49534888e-05  7.02008059e-03
#  -3.84817538e+00  6.38814495e+02 -4.05330049e+04  4.57786418e-06
#   4.70950393e+00  4.30724089e+01  1.53149465e+01 -3.42959203e+02
#  -5.24234743e+05  9.24230193e+07 -3.27453146e+09 -2.17425192e+00
#  -4.32660417e-06 -5.40864886e-02  5.07439567e+02  1.17525743e+03
#  -3.08270508e+02  7.41910950e+04 -2.13777407e+06 -2.38879433e+09
#   1.02308074e+11  1.29091722e+01 -9.64982153e+00 -1.27588597e+03
#  -2.10580730e+03  3.58987864e+03 -1.07166637e+06  9.09954655e+07
#   7.52211483e+09  2.32787456e+11 -7.76710057e+01  2.65131108e+02
#   4.27487937e+03 -2.56411210e+04  1.45012750e+04  7.95068990e+06
#   2.36124228e+09 -1.69877454e+11 -6.24121173e+12 -4.64988166e+03
#  -2.46686152e+03]
# 'P_i':[ 4.64341057e-03, -1.60270353e+00, -4.82615247e-01, -2.84105222e+00,
#   3.55482995e+03,  4.05471532e+05, -3.66207894e+06, -2.51177494e-01,
#   1.85738285e-05,  1.01768190e-04,  1.49534888e-05,  7.02008059e-03,
#  -3.84817538e+00,  6.38814495e+02, -4.05330049e+04,  4.57786418e-06,
#   4.70950393e+00,  4.30724089e+01,  1.53149465e+01, -3.42959203e+02,
#  -5.24234743e+05,  9.24230193e+07, -3.27453146e+09, -2.17425192e+00,
#  -4.32660417e-06, -5.40864886e-02,  5.07439567e+02,  1.17525743e+03,
#  -3.08270508e+02,  7.41910950e+04, -2.13777407e+06, -2.38879433e+09,
#   1.02308074e+11,  1.29091722e+01, -9.64982153e+00, -1.27588597e+03,
#  -2.10580730e+03,  3.58987864e+03, -1.07166637e+06,  9.09954655e+07,
#   7.52211483e+09,  2.32787456e+11, -7.76710057e+01,  2.65131108e+02,
#   4.27487937e+03, -2.56411210e+04,  1.45012750e+04,  7.95068990e+06,
#   2.36124228e+09, -1.69877454e+11, -6.24121173e+12, -4.64988166e+03,
#  -2.46686152e+03],

